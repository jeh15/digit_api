workspace(name = "lowlevelapi")

# Setup Hermetic Python toolchain:
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

SHA="5868e73107a8e85d8f323806e60cad7283f34b32163ea6ff1020cf27abef6036"

VERSION="0.25.0"

http_archive(
    name = "rules_python",
    sha256 = SHA,
    strip_prefix = "rules_python-{}".format(VERSION),
    url = "https://github.com/bazelbuild/rules_python/releases/download/{}/rules_python-{}.tar.gz".format(VERSION,VERSION),
)

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

# Pybind11 currently does not support python 3.11:
python_register_toolchains(
    name = "python_3_10",
    python_version = "3.10",
)

load("@python_3_10//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
  name = "my_deps",
  python_interpreter_target = interpreter,
  requirements = "//:requirements.txt",
)

load("@my_deps//:requirements.bzl", "install_deps")
install_deps()

# Pybind11:
http_archive(
  name = "pybind11_bazel",
  strip_prefix = "pybind11_bazel-2.11.1",
  sha256 = "2c466c9b3cca7852b47e0785003128984fcf0d5d61a1a2e4c5aceefd935ac220",
  urls = ["https://github.com/pybind/pybind11_bazel/releases/download/v2.11.1/pybind11_bazel-2.11.1.zip"],
)
http_archive(
  name = "pybind11",
  build_file = "@pybind11_bazel//:pybind11.BUILD",
  strip_prefix = "pybind11_bazel-2.11.1",
  sha256 = "e8355ee56c2ff772334b4bfa22be17c709e5573f6d1d561c7176312156c27bd4",
  urls = ["https://github.com/pybind/pybind11_bazel/releases/download/v2.11.1/pybind11_bazel-2.11.1.tar.gz"],
)

load("@pybind11_bazel//:python_configure.bzl", "python_configure")

python_configure(
  name = "local_config_python",
  python_interpreter_target = interpreter,
)


# ZSTD:
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

new_git_repository(
    name = "zstd",
    remote = "git@github.com:facebook/zstd.git",
    commit = "823b32ce430cd21706a5ffb5bd9e2e6297d919cc",
    build_file = "//third_party/zstd:BUILD.bazel",
)

# Eigen:
new_git_repository(
    name = "eigen",
    remote = "https://gitlab.com/libeigen/eigen.git",
    commit = "3147391d946bb4b6c68edd901f2add6ac1f31f8c",
    build_file = "//third_party/eigen:BUILD.bazel",
)

# Drake:
DRAKE_COMMIT = "v1.20.0"
DRAKE_CHECKSUM = "e343bc558f840be17c05053c6fc3fff899a3bf4540f3b285f6cd7ca5937f7b46"

# Load an environment variable.
load("//:environ.bzl", "environ_repository")
environ_repository(name = "environ", vars = ["EXAMPLES_LOCAL_DRAKE_PATH"])
load("@environ//:environ.bzl", EXAMPLES_LOCAL_DRAKE_PATH = "EXAMPLES_LOCAL_DRAKE_PATH")

http_archive(
    name = "drake" if not EXAMPLES_LOCAL_DRAKE_PATH else "drake_ignored",
    urls = [x.format(DRAKE_COMMIT) for x in [
        "https://github.com/RobotLocomotion/drake/archive/{}.tar.gz",
    ]],
    sha256 = DRAKE_CHECKSUM,
    strip_prefix = "drake-{}".format(DRAKE_COMMIT.lstrip("v")),
)

local_repository(
    name = "drake" if EXAMPLES_LOCAL_DRAKE_PATH else "drake_ignored",
    path = EXAMPLES_LOCAL_DRAKE_PATH,
)
print("Using EXAMPLES_LOCAL_DRAKE_PATH={}".format(EXAMPLES_LOCAL_DRAKE_PATH)) if EXAMPLES_LOCAL_DRAKE_PATH else None  # noqa

load("@drake//tools/workspace:default.bzl", "add_default_workspace")
add_default_workspace()
